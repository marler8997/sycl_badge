#!/usr/bin/env python3
# NOTE:
# I wrote this script but I no longer need it because I can use uf2conv.py from github.com/Microsoft/uf2
# However, I'll still keep it around for now in case it helps when we create the Zig equivalent.
import sys
import struct
import argparse
import math

def write_block(f, data, blockno, block_count):
    if len(data) > 256:
        sys.exit("todo")

    header = struct.pack(
        "<IIIIIIII",
        0x0a324655, # magic start0
        0x9E5D5157, # magic start1
        0x2000, # flags (family id)
        0x4000 + (blockno * 256), # address
        #len(data), # data len
        256, # data len, hardcoding to 256 for now
        blockno, # blockno
        block_count, # block count
        0x55114460, # family
    )
    f.write(header)
    f.write(data)

    data_len = len(header) + len(data)
    pad_len = 508 - data_len
    if pad_len < 0:
        assert(False)
    for i in range(pad_len):
        f.write(b"\x00")
    f.write(struct.pack("<I", 0x0AB16F30))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("in_file", action="store")
    parser.add_argument("out_file", action="store")
    args = parser.parse_args()
    in_file = args.in_file
    out_file = args.out_file

    with open(in_file, "rb") as f:
        data = f.read()

    #data = struct.pack(
    #    "<II",
    #    0x20030000, # initial stack value
    #    0x4008, # reset vector
    #) + data

    with open(out_file, "wb") as f:
        block_count = math.floor(len(data) / 256)
        if (len(data) % 256) != 0:
            block_count += 1

        for blockno in range(0, block_count):
            off = blockno * 256
            end = (blockno + 1) * 256
            if end > len(data):
                end = len(data)
            write_block(f, data[off:end], blockno, block_count)

main()
